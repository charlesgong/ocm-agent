// Code generated by MockGen. DO NOT EDIT.
// Source: ocm.go

// Package mock_ocm is a generated GoMock package.
package mock_ocm

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/openshift-online/ocm-sdk-go/clustersmgmt/v1"
	v10 "github.com/openshift-online/ocm-sdk-go/servicelogs/v1"
)

// MockOCMClient is a mock of OCMClient interface.
type MockOCMClient struct {
	ctrl     *gomock.Controller
	recorder *MockOCMClientMockRecorder
}

// MockOCMClientMockRecorder is the mock recorder for MockOCMClient.
type MockOCMClientMockRecorder struct {
	mock *MockOCMClient
}

// NewMockOCMClient creates a new mock instance.
func NewMockOCMClient(ctrl *gomock.Controller) *MockOCMClient {
	mock := &MockOCMClient{ctrl: ctrl}
	mock.recorder = &MockOCMClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOCMClient) EXPECT() *MockOCMClientMockRecorder {
	return m.recorder
}

// GetCluster mocks base method.
func (m *MockOCMClient) GetCluster(clusterID string) (*v1.Cluster, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", clusterID)
	ret0, _ := ret[0].(*v1.Cluster)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockOCMClientMockRecorder) GetCluster(clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockOCMClient)(nil).GetCluster), clusterID)
}

// GetLimitedSupportReasons mocks base method.
func (m *MockOCMClient) GetLimitedSupportReasons(clusterUUID string) ([]*v1.LimitedSupportReason, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLimitedSupportReasons", clusterUUID)
	ret0, _ := ret[0].([]*v1.LimitedSupportReason)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLimitedSupportReasons indicates an expected call of GetLimitedSupportReasons.
func (mr *MockOCMClientMockRecorder) GetLimitedSupportReasons(clusterUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLimitedSupportReasons", reflect.TypeOf((*MockOCMClient)(nil).GetLimitedSupportReasons), clusterUUID)
}

// GetUpgradePolicies mocks base method.
func (m *MockOCMClient) GetUpgradePolicies(clusterID string) ([]*v1.UpgradePolicy, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpgradePolicies", clusterID)
	ret0, _ := ret[0].([]*v1.UpgradePolicy)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUpgradePolicies indicates an expected call of GetUpgradePolicies.
func (mr *MockOCMClientMockRecorder) GetUpgradePolicies(clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpgradePolicies", reflect.TypeOf((*MockOCMClient)(nil).GetUpgradePolicies), clusterID)
}

// GetUpgradePolicy mocks base method.
func (m *MockOCMClient) GetUpgradePolicy(clusterID, upgradePolicyID string) (*v1.UpgradePolicy, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpgradePolicy", clusterID, upgradePolicyID)
	ret0, _ := ret[0].(*v1.UpgradePolicy)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUpgradePolicy indicates an expected call of GetUpgradePolicy.
func (mr *MockOCMClientMockRecorder) GetUpgradePolicy(clusterID, upgradePolicyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpgradePolicy", reflect.TypeOf((*MockOCMClient)(nil).GetUpgradePolicy), clusterID, upgradePolicyID)
}

// GetUpgradePolicyState mocks base method.
func (m *MockOCMClient) GetUpgradePolicyState(clusterID, upgradePolicyID string) (*v1.UpgradePolicyState, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpgradePolicyState", clusterID, upgradePolicyID)
	ret0, _ := ret[0].(*v1.UpgradePolicyState)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUpgradePolicyState indicates an expected call of GetUpgradePolicyState.
func (mr *MockOCMClientMockRecorder) GetUpgradePolicyState(clusterID, upgradePolicyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpgradePolicyState", reflect.TypeOf((*MockOCMClient)(nil).GetUpgradePolicyState), clusterID, upgradePolicyID)
}

// RemoveLimitedSupport mocks base method.
func (m *MockOCMClient) RemoveLimitedSupport(clusterUUID, lsReasonID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLimitedSupport", clusterUUID, lsReasonID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveLimitedSupport indicates an expected call of RemoveLimitedSupport.
func (mr *MockOCMClientMockRecorder) RemoveLimitedSupport(clusterUUID, lsReasonID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLimitedSupport", reflect.TypeOf((*MockOCMClient)(nil).RemoveLimitedSupport), clusterUUID, lsReasonID)
}

// SendLimitedSupport mocks base method.
func (m *MockOCMClient) SendLimitedSupport(clusterUUID string, lsReason *v1.LimitedSupportReason) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendLimitedSupport", clusterUUID, lsReason)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendLimitedSupport indicates an expected call of SendLimitedSupport.
func (mr *MockOCMClientMockRecorder) SendLimitedSupport(clusterUUID, lsReason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendLimitedSupport", reflect.TypeOf((*MockOCMClient)(nil).SendLimitedSupport), clusterUUID, lsReason)
}

// SendServiceLog mocks base method.
func (m *MockOCMClient) SendServiceLog(logEntry *v10.LogEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendServiceLog", logEntry)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendServiceLog indicates an expected call of SendServiceLog.
func (mr *MockOCMClientMockRecorder) SendServiceLog(logEntry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendServiceLog", reflect.TypeOf((*MockOCMClient)(nil).SendServiceLog), logEntry)
}

// UpdateUpgradePolicyState mocks base method.
func (m *MockOCMClient) UpdateUpgradePolicyState(clusterID, upgradePolicyID string, policyState *v1.UpgradePolicyState) (*v1.UpgradePolicyState, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUpgradePolicyState", clusterID, upgradePolicyID, policyState)
	ret0, _ := ret[0].(*v1.UpgradePolicyState)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateUpgradePolicyState indicates an expected call of UpdateUpgradePolicyState.
func (mr *MockOCMClientMockRecorder) UpdateUpgradePolicyState(clusterID, upgradePolicyID, policyState interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUpgradePolicyState", reflect.TypeOf((*MockOCMClient)(nil).UpdateUpgradePolicyState), clusterID, upgradePolicyID, policyState)
}
